{
  // TypeScript 编译器选项配置
  "compilerOptions": {
    // 编译目标：ES2020 提供现代 JavaScript 特性，兼容性好
    // 影响：生成的代码使用 ES2020 语法，支持可选链、空值合并等特性
    "target": "ES2020",

    // 使用标准的类字段定义行为（ES2022 标准）
    // 影响：类字段的初始化行为更符合标准，避免一些边界情况的问题
    "useDefineForClassFields": true,

    // 模块系统：ESNext 支持最新的 ES 模块语法
    // 影响：可以使用 import/export 语法，支持动态导入等现代特性
    "module": "ESNext",

    // 包含的库文件：ES2020 + DOM API
    // 影响：提供 ES2020 语法支持和浏览器 DOM API 的类型定义
    "lib": ["ES2020", "DOM", "DOM.Iterable"],

    // 跳过库文件的类型检查，提高编译速度
    // 影响：不检查 node_modules 中的 .d.ts 文件，编译更快但可能错过一些类型错误
    "skipLibCheck": true,

    /* 打包工具模式配置 - 专为 Vite 等现代打包工具优化 */
    // 模块解析策略：bundler 模式，支持现代包管理器的 exports 字段
    // 影响：正确解析 @nolebase 等包的导入路径，这是解决你 Zed 编辑器报错的关键配置
    "moduleResolution": "bundler",

    // 允许导入 .ts 扩展名的文件
    // 影响：可以写 import './file.ts' 而不是 import './file'
    "allowImportingTsExtensions": true,

    // 允许导入 JSON 文件
    // 影响：可以直接 import data from './data.json'
    "resolveJsonModule": true,

    // 每个文件作为独立模块处理
    // 影响：确保每个文件都可以独立编译，提高构建工具的性能
    "isolatedModules": true,

    // 不生成编译后的文件（因为 Vite 会处理编译）
    // 影响：TypeScript 只做类型检查，不输出 .js 文件
    "noEmit": true,

    // JSX 处理方式：preserve 保持原样，让 Vite 处理
    // 影响：Vue 的 JSX 语法会被正确处理
    "jsx": "preserve",

    /* 代码质量检查配置 */
    // 启用严格模式：包含所有严格类型检查
    // 影响：更严格的类型检查，帮助发现潜在问题，提高代码质量
    "strict": true,

    // 不报告未使用的局部变量（设为 false 避免开发时的干扰）
    // 影响：不会因为临时注释掉的代码而报错
    "noUnusedLocals": false,

    // 不报告未使用的参数（设为 false 避免开发时的干扰）
    // 影响：函数参数可以暂时不使用而不报错
    "noUnusedParameters": false,

    // 检查 switch 语句的 fallthrough 情况
    // 影响：防止忘记写 break 语句导致的逻辑错误
    "noFallthroughCasesInSwitch": true,

    /* Vue 和现代 JavaScript 兼容性配置 */
    // 允许 JavaScript 文件参与编译
    // 影响：.js 文件也会被类型检查，提供更好的开发体验
    "allowJs": true,

    // ES 模块互操作性
    // 影响：可以更自然地导入 CommonJS 模块
    "esModuleInterop": true,

    // 允许合成默认导入
    // 影响：可以使用 import React from 'react' 而不是 import * as React
    "allowSyntheticDefaultImports": true,

    // 强制文件名大小写一致
    // 影响：防止在不同操作系统间出现文件名大小写问题
    "forceConsistentCasingInFileNames": true,

    /* 路径映射配置 - 方便导入文件 */
    // 基础路径：当前目录
    "baseUrl": ".",
    // 路径别名配置
    // 影响：可以使用 @/components 代替 ./components，但你的项目暂时用不到
    "paths": {
      "@/*": ["./*"],
      "~/*": ["./*"]
    }
  },

  // 包含的文件和目录 - 告诉 TypeScript 检查哪些文件
  "include": [
    ".vitepress/**/*",  // VitePress 配置和主题文件
    "posts/**/*",       // 你的博客文章
    "pages/**/*",       // 你的页面文件
    "*.md",            // 根目录的 Markdown 文件
    "*.ts",            // 根目录的 TypeScript 文件
    "*.vue"            // 根目录的 Vue 文件
  ],

  // 排除的文件和目录 - 不需要类型检查的文件
  "exclude": [
    "node_modules",     // 第三方包
    "dist",            // 构建输出目录
    ".vitepress/dist"  // VitePress 构建输出
  ]
}
